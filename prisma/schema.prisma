generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypeAuth {
  account
  google
  facebook
}

enum LevelClass {
  beginner
  elementary
  intermediate
  upper_intermediate
  advanced
}

enum StatusClass {
  private
  protected
  public
}

model User {
  id             String     @id @default(uuid())
  typeAuth       TypeAuth   @default(account)
  googleId       String?    @unique
  facebookId     String?    @unique
  email          String?    @unique
  password       String?
  telegramId     String?    @unique
  name           String?
  avatarUrl      String?
  phone          String?
  timezone       String     @default("UTC")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  prompt         String?
  classes        Class[]
  activities     Activity[]
  streak         Int?       @default(0)
  lastActiveDate DateTime?
 
  @@map("users")
}

model Class {
  id        String   @id @default(uuid())
  userId    String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  prompt    String
  status    StatusClass @default(private)
  deleted   Boolean     @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topics    Topic[]

  @@map("classes")
}

model Topic {
  id          String      @id @default(uuid())
  classId     String
  name        String
  prompt      String?     @default("Không có mô tả")
  deleted     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  class       Class       @relation(fields: [classId], references: [id], onDelete: Cascade)
  knowledges  Knowledge[]

  @@map("topics")
}

model QuestionType{
  id        String   @id @default(uuid())
  name      String 
  prompt    String?
  questions Question[]
  deleted   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("question_types")
}

model Knowledge {
  id        String     @id @default(uuid())
  parentId  String?
  parent    Knowledge?  @relation("KnowledgeParent", fields: [parentId], references: [id], onDelete: Cascade)
  children  Knowledge[] @relation("KnowledgeParent")
  topicId   String
  topic     Topic      @relation(fields: [topicId], references: [id])
  name      String
  prompt    String     @default("Không có mô tả")
  theory    String?
  reviewAt  DateTime?  
  avgScore  Int        @default(0) 
  deleted   Boolean    @default(false)
  createdAt DateTime   @default(now()) 
  updatedAt DateTime   @updatedAt 
  exams Exam[]

  @@map("knowledges")
}

enum TypeExam {
  evaluate_exercise
  practice_exercise
  evaluate_theory
  practice_theory
}

model Exam {
  id          String   @id @default(uuid())
  knowledgeId String
  knowledge   Knowledge  @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)
  prompt      String?
  aiFeedback  String?
  questions   Question[]
  type        TypeExam   
  deleted     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("exams")
}

model Question {
  id          String     @id @default(uuid())
  examId      String
  exam        Exam       @relation(fields: [examId], references: [id], onDelete: Cascade)
  content     String
  answer      String?
  score       Int?
  explain     String?
  aiFeedback  String?
  typeId      String
  type        QuestionType @relation(fields: [typeId], references: [id])
  deleted     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("questions")
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  timezone  String   @default("UTC")
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date, timezone])
  @@map("activities")
}
