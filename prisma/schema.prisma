generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status{
  active
  inactive
}

enum TypeQuestion {
  theory
  practice
}

model User {
  id             String     @id @default(uuid())
  clerkId        String     @unique
  telegramId     String?    @unique
  prompt         String?
  timezone       String     @default("Asia/Ho_Chi_Minh")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  activities     Activity[]
  intervalSendMessage Int?
  scheduleKnowledgeId String? @unique
  scheduleKnowledge Knowledge? @relation(fields: [scheduleKnowledgeId], references: [id], onDelete: Cascade)
  scheduleTypeQuestion TypeQuestion?
  streak         Int        @default(0)
  longestStreak  Int        @default(0)
  lastActiveDate DateTime?
  topics         Topic[]
 
  @@map("users")
}

model Topic {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  prompt      String?     @default("Không có mô tả")
  deleted     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      Status      @default(active)
  knowledges  Knowledge[]

  @@map("topics")
}

model Knowledge {
  id        String     @id @default(uuid())
  parentId  String?
  parent    Knowledge?  @relation("KnowledgeParent", fields: [parentId], references: [id], onDelete: Cascade)
  children  Knowledge[] @relation("KnowledgeParent")
  topicId   String
  topic     Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  name      String
  theory    String?
  reviewAt  DateTime?  
  userSchedule User?
  deleted   Boolean    @default(false)
  status    Status     @default(active)
  createdAt DateTime   @default(now()) 
  updatedAt DateTime   @updatedAt 
  questions Question[]  
  @@map("knowledges")
}

model Question {
  id          String     @id @default(uuid())
  content     String
  answer      String?
  score       Int?
  explain     String?
  aiFeedback  String?
  knowledgeId String
  type        TypeQuestion
  knowledge   Knowledge  @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)
  deleted     Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("questions")
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      String
  timezone  String   @default("Asia/Ho_Chi_Minh")
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date, timezone])
  @@map("activities")
}
